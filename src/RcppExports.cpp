// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// detect_language_cc
Rcpp::CharacterVector detect_language_cc(Rcpp::String input, bool plain_text);
RcppExport SEXP cld2_detect_language_cc(SEXP inputSEXP, SEXP plain_textSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::String >::type input(inputSEXP);
    Rcpp::traits::input_parameter< bool >::type plain_text(plain_textSEXP);
    rcpp_result_gen = Rcpp::wrap(detect_language_cc(input, plain_text));
    return rcpp_result_gen;
END_RCPP
}
// detect_language_multi_cc
Rcpp::List detect_language_multi_cc(Rcpp::String input, bool plain_text);
RcppExport SEXP cld2_detect_language_multi_cc(SEXP inputSEXP, SEXP plain_textSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::String >::type input(inputSEXP);
    Rcpp::traits::input_parameter< bool >::type plain_text(plain_textSEXP);
    rcpp_result_gen = Rcpp::wrap(detect_language_multi_cc(input, plain_text));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"cld2_detect_language_cc", (DL_FUNC) &cld2_detect_language_cc, 2},
    {"cld2_detect_language_multi_cc", (DL_FUNC) &cld2_detect_language_multi_cc, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_cld2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
